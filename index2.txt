<!DOCTYPE html>
<meta charset="utf-8">
<html>
<head>
		
		<link rel="stylesheet" type="text/css" href="bootstrap.min.css">
		<title>Project 1 - YaHui Liu</title>
</head>

<style> /* set the CSS */

	.bar { fill: lightseagreen; }
	text {
	  font: 10px sans-serif;
	  text-anchor: middle;
	}
	body {
		margin-left: 15%;
  		width: 70%;
	}
	h2{
	text-align: center;
		background-color : cornsilk;
		
		color: gray;
		font: impact;
	}
	h3{
	
		background-color : 	white;
		
		color: black;
		font: impact;
	}

	h5{
	
		background-color : darkslategray	;
		color: white;
		font: impact;
	
	}
	
	img {
    	width: 100%;
  		border: 1px solid gray;
	}
	p {
		text-align: justify;
    	text-justify: inter-word;
		background-color:lightslategrey;
		color:white;
	}
	
	.legend{
		font-size:15px;
	}
	
	rect{
	  stroke-width:4;
	}
	
	
	
	.tooltip {
	  background: #eee;
	  box-shadow: 0 0 5px #999999;
	  color: #333;
	  display: none;
	  font-size: 12px;
	  left: 130px;
	  padding: 10px;
	  position: absolute;
	  text-align: center;
	  top: 95px;
	  width: 80px;
	  z-index: 10;
}
</style>
<body>
	<header>
			<h2 style=>Project 2 --Louisville Government Employee Salaries 
			<br><br> YaHui Liu&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;01/28/2017<br></h4>
			
		</header>
		
		<br>
		<p>
			<h3> <center>FIRST CHART</center><br>
			
            </h3>
		</p>
		
		
		 <script src="d3.v4.min.js"></script>
		<script>
		
		var dispatch = d3.dispatch("load", "statechange");

var groups = [
  "08to10",
  "11to13",
  "14to17"
];






d3.csv("data1.csv", type, function(error, states) {
  if (error) throw error;
  var stateByD = d3.map();
  states.forEach(function(d) { stateByD.set(d.year, d); });
  dispatch.call("load", this, stateByD);
  dispatch.call("statechange", this, stateByD.get("Finance"));
});

// A drop-down menu for selecting a state; uses the "menu" namespace.
dispatch.on("load.menu", function(stateByD) {
  var select = d3.select("body")
    .append("div")
    .append("select")
      .on("change", function() { dispatch.call("statechange", this, stateByD.get(this.value)); });
   
  select.selectAll("option")
      .data(stateByD.values())
      .enter().append("option")
      .attr("value", function(d) { return d.year; })
      .text(function(d) { return d.year; });

  dispatch.on("statechange.menu", function(department) {
    select.property("value", department.year);
  });
});



// A pie chart to show population by age group; uses the "pie" namespace.
dispatch.on("load.pie", function(stateByD) {


	var legendRectSize =20;
	var legendSpacing =15;



  var width2 = 880,
      height2 = 460,
      radius = Math.min(width2, height2) / 2;

  var color = d3.scaleOrdinal()
      .domain(groups)
      .range(["#98abc5", "#6b486b", "#ff8c00"]);

  var arc = d3.arc()
      .outerRadius(radius - 10)
      .innerRadius(radius - 70);
 
  var pie = d3.pie()
	.value(function(d){return d.count;})
      .sort(null);
	  
  var tooltip = d3.select("body")            // NEW
  .append('div')                             // NEW
  .attr('class', 'tooltip');                 // NEW


 tooltip.append('div')                        // NEW
  .attr('class', 'count');                   // NEW
	  
	  
  var svg = d3.select("body").append("svg")
      .attr("width", width2)
      .attr("height", height2)
      .append("g")
      .attr("transform", "translate(" + width2 / 2 + "," + height2 / 2 + ")");

	
  var path = svg.selectAll("path")
      .data(groups)
      .enter().append("path")
      .attr("fill", color)
      .each(function() { this._current = {startAngle: 0, endAngle: 0}; });
	  
	  
	  
	path.on('mouseover', function(d) {           // NEW
  // Code                                    // NEW
	tooltip.select('.count').html(d.data+'  '+ d.data.count+'  '+'click for more information!');
     tooltip.style('display', 'block'); 
   });                                          // NEW

	path.on('mouseout', function(d) {            // NEW
  // Code                                    // NEW
 tooltip.style('display', 'none');  
	});     

path.on('mousemove', function(d) {                            // NEW
            tooltip.style('top', (d3.event.layerY + 10) + 'px')         // NEW
              .style('left', (d3.event.layerX + 10) + 'px');            // NEW
          });                                                           // NEW


                    
	var legend = svg.selectAll('.legend')
			.data(color.domain())
			.enter()
			.append('g')
			.attr('class','legend')
			.attr('transform', function(d, i) {
    var height3 = legendRectSize + legendSpacing;
    var offset =  height3 * color.domain().length / 2;
    var horz = -2 * legendRectSize;
    var vert = i * height3 - offset;
    return 'translate(' + horz + ',' + vert + ')';
  });
	 
	 legend.append('rect')
	 .attr('width', legendRectSize)
	.attr('height', legendRectSize)
	.style('fill', color)
	.style('stroke', color);
  
  legend.append('text')
  .attr('x', legendRectSize + legendSpacing+10)
  .attr('y', legendRectSize - legendSpacing +5)
  .text(function(d) { return d; });
  
    dispatch.on("statechange.pie", function(d) {
    path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
        .attrTween("d", function(d) {
          var interpolate = d3.interpolate(this._current, d);
          this._current = interpolate(0);
          return function(t) {
            return arc(interpolate(t));
          };
        });
  });
  
});

// Coerce population counts to numbers and compute total per state.
function type(d) {
  d.total = d3.sum(groups, function(k) { return d[k] = +d[k]; });
  return d;
}
</script>
		
</body>
</html>